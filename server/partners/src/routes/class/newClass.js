/**
 * Express Router for creating a new class
 * Mounted on /class
 * @author JJ
 * @module create new class route
 */

const express = require("express");
const router = express.Router();
const SQLdb = require("@enkeldigital/ce-sql");
const onlyOwnResource = require("../../middleware/onlyOwnResource");
const dbTags = require("../../db/tags");
const isSafeHTML = require("../../validations/isSafeHTML");
const search = require("@enkeldigital/ce-search-lib");

const createLogger = require("@lionellbriones/logging").default;
const logger = createLogger("routes:users");

/**
 * Create new class for partner
 * @todo Only allow partner or admin partner to call this API
 * @name POST /class/new
 * @param {Object} clas
 * @returns {object} success indicator
 */
router.post("/new", express.json(), async (req, res) => {
  try {
    const { clas } = req.body;

    if (!isSafeHTML(clas.description))
      throw new Error("Class description is not a sanitized HTML.");

    // Store the tags (defaults to empty array) for use later, and remove from the class object
    const tags = clas.tags || [];
    delete clas.tags;

    // Only read back the values generated by DB to insert into clas from request body,
    // instead of reading back everything to reduce bandwidth usage.
    const readBackData = (
      await SQLdb("classes").insert(clas).returning("id")
    )[0];

    // Insert DB read back data with fields generated by DB into the clas
    // Since we only use returning "id", the returned value is just the value directly instead of being nested in an object.
    clas.id = readBackData;
    clas.tags = tags;

    // Insert class tags into DB
    await dbTags.class.insert(clas.id, tags);

    // @todo If this fails, we need to somehow allow a retry later.
    // Add new class to the search index
    await search.classes.add(clas, "class");

    res.status(201).json({
      success: true,
      // Return the classID so that the client can trigger a getClass call using the classID
      // Instead of returning the classObject here directly to not reimplement the code for getting things like tags and reviews onto the class object
      classID: clas.id,
    });
  } catch (error) {
    logger.error(error);
    res.status(500).json({ success: false, error: error.message });
  }
});

module.exports = router;
